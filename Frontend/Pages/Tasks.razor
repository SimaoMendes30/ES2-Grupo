@page "/tasks"
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Frontend.Components.Tarefa
@using Frontend.DTOs.Task
@using Frontend.Services
@layout WorkspaceLayout

@inject TaskService TaskService
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Tarefas</PageTitle>

<!-- Cabeçalho -->
<div class="d-flex flex-column align-center justify-center w-100 pt-8">
    <div style="width:90%">
        <!-- Filtros / Ordenação -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-between"
                  Elevation="1"
                  Style="background:#fff;border-radius:12px;min-height:120px">
            <MudText Typo="Typo.h4" Class="mb-0" Color="Color.Primary">Tarefas</MudText>
            <MudSpacer/>

            <div class="d-flex align-center" style="gap:2rem">
                <!-- Filtros -->
                <div class="d-flex align-center" style="gap:.5rem;cursor:pointer"
                     @onclick="() => mostrarFiltros = !mostrarFiltros">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary"/>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Filtros</MudText>
                </div>

                <!-- Ordenação -->
                <MudMenu>
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            Ordenar por
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem @onclick='() => OrdenarPor("titulo asc")'>Título (A-Z)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("titulo desc")'>Título (Z-A)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("dataInicio asc")'>Data Início (Mais antiga)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("dataInicio desc")'>Data Início (Mais recente)</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        </MudPaper>

        <!-- Painel de Filtros -->
        @if (mostrarFiltros)
        {
            <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:#fff;border-radius:12px">
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Filtros</MudText>
                <MudDivider Class="mb-4"/>

                <MudGrid GutterSize="3">
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="_filtroTitulo" Label="Título da Tarefa" FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="string?" @bind-Value="_filtroResponsavel" Label="Selecionar Responsabilidade" FullWidth>
                            <MudSelectItem Value="_states[0]">As minhas Tarefas</MudSelectItem>
                            <MudSelectItem Value="_states[1]">As Tarefas associadas</MudSelectItem>
                            <MudSelectItem Value="_states[2]">Todas as Tarefas</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudStack Spacing="1">
                            <MudDatePicker @bind-Date="_filtroDataInicio" Label="Data Início" ShowToolbar="false"/>
                            <MudDatePicker @bind-Date="_filtroDataFim" Label="Data Fim" ShowToolbar="false"/>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end mt-4" style="gap:1rem">
                    <MudButton Variant="Variant.Outlined" OnClick="LimparFiltros">Limpar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AplicarFiltros">Aplicar</MudButton>
                </div>
            </MudPaper>
        }

        <!-- Listagem de Tarefas -->
        <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudGrid GutterSize="3">
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Class="d-flex align-center justify-center cursor-pointer"
                             Style="height:100%;border:2px solid var(--mud-palette-primary);border-radius:12px"
                             Elevation="1"
                             @onclick="CriarNovaTarefa">
                        <MudCardContent Class="d-flex align-center justify-center w-100 h-100 p-0">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                @if (_tarefas.Count == 0)
                {
                    <MudItem xs="9">
                        <MudCard Class="d-flex align-center justify-center" Style="height:100%;background:#fafafa;border-radius:12px" Elevation="0">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1" Style="color:lightblue">Não existem tarefas</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var t in _tarefas)
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <NavLink href="@($"/task/{t.IdTarefa}")" class="text-decoration-none d-block">
                                <MudCard Class="pa-3" Style="height:100%;border-radius:12px" Elevation="2">
                                    <MudCardContent>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                                @(t.Titulo?.Length > 18 ? t.Titulo[..18] + "..." : t.Titulo)
                                            </MudText>
                                            <MudSpacer/>
                                            <MudIcon Icon="@Icons.Material.Filled.Event"/>
                                            <MudText Typo="Typo.caption">@t.DataInicio.ToString("dd/MM/yyyy")</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Person"/>
                                            <MudText Typo="Typo.caption">@t.Responsavel</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Description"/>
                                            <MudText Typo="Typo.caption">
                                                @(t.Descricao?.Length > 30 ? t.Descricao[..30] + "..." : t.Descricao)
                                            </MudText>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </NavLink>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>

        <!-- Paginação -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-center" Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudPagination ShowPageButtons="true" 
                           ShowFirstButton="true" 
                           ShowLastButton="true" 
                           Count="@_totalCount" 
                           BoundaryCount="1"
                           MiddleCount="2"
                           Size="Size.Medium"
                           Color="Color.Primary"
                           SelectedChanged="async (page) => await MudarPagina(page)" />
        </MudPaper>
    </div>
</div>

@code {
    private readonly string[] _states = {"sim", "nao", ""};
    private List<TaskDetailsDto> _tarefas = new();
    private int _paginaAtual = 1;
    private int _tamanhoPagina = 6;
    private int _totalCount = 0;

    private string _ordenacao = "descricao";
    private bool _descendente = false;
    
    private string? _filtroResponsavel;
    private bool mostrarFiltros = false;
    private string? _filtroTitulo;
    private DateTime? _filtroDataInicio;
    private DateTime? _filtroDataFim;

    protected override async Task OnInitializedAsync() => await CarregarDadosAsync();

    private async Task CarregarDadosAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("auth_token");
            if (string.IsNullOrEmpty(token)) return;

            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
            var idClaim = jwt.Claims.FirstOrDefault(c => c.Type == "nameid");

            if (idClaim != null && int.TryParse(idClaim.Value, out var userId))
            {
                // Definir o filtro de Responsável com base na seleção do utilizador
                int? responsavel = null;
                if (_filtroResponsavel == "sim")
                {
                    responsavel = userId; 
                }
                else if (_filtroResponsavel == "nao")
                {
                    responsavel = userId == 0 ? null : -userId;
                } else
                {
                    responsavel = null; 
                }

                var filtros = new TaskFilterDto
                {
                    Titulo = _filtroTitulo,
                    Responsavel = responsavel, 
                    DataInicioDe = _filtroDataInicio,
                    DataInicioAte = _filtroDataFim
                };

                var paged = await TaskService.GetByUserPagedAsync(userId, _paginaAtual, _tamanhoPagina, _ordenacao, _descendente, filtros);
                _tarefas = paged.Items.ToList();
                _totalCount = paged.TotalCount;
            }
        }
        catch
        {
            Snackbar.Add("Erro ao carregar tarefas.", Severity.Error);
        }
    }
    
    private void OrdenarPor(string campo)
    {
        if (_ordenacao == campo)
        {
            _descendente = !_descendente;
        }
        else
        {
            _ordenacao = campo;
            _descendente = false;
        }

        _paginaAtual = 1;
        _ = CarregarDadosAsync();
    }

    private async Task CriarNovaTarefa()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<CreateTaskDialog>("Criar Tarefa", options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Tarefa criada com sucesso!", Severity.Success);
            await CarregarDadosAsync();
        }
    }

    private async Task MudarPagina(int novaPagina)
    {
        _paginaAtual = novaPagina;
        await CarregarDadosAsync();
    }

    private async Task AplicarFiltros()
    {
        _paginaAtual = 1;
        await CarregarDadosAsync();
    }

    private async Task LimparFiltros()
    {
        _filtroTitulo = null;
        _filtroResponsavel = null;
        _filtroDataInicio = null;
        _filtroDataFim = null;
        _paginaAtual = 1;
        await CarregarDadosAsync();
    }
}
