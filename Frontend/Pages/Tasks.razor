@page "/tasks"
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Frontend.Components.Tarefa
@using Frontend.DTOs.Task
@using Frontend.Services
@using Frontend.Pages
@layout WorkspaceLayout

@inject TaskService TaskService
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Tarefas</PageTitle>

<!-- Cabeçalho -->
<div class="d-flex flex-column align-center justify-center w-100 pt-8">
    <div style="width:90%">
        <!-- Filtros / Ordenação -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-between"
                  Elevation="1"
                  Style="background:#fff;border-radius:12px;min-height:120px">
            <MudText Typo="Typo.h4" Class="mb-0" Color="Color.Primary">Tarefas</MudText>
            <MudSpacer/>

            <div class="d-flex align-center" style="gap:2rem">
                <!-- Filtros -->
                <div class="d-flex align-center" style="gap:.5rem;cursor:pointer"
                     @onclick="() => mostrarFiltros = !mostrarFiltros">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary"/>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Filtros</MudText>
                </div>

                <!-- Ordenação -->
                <MudMenu>
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            Ordenar por
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem @onclick='() => OrdenarPor("titulo asc")'>Título (A-Z)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("titulo desc")'>Título (Z-A)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("dataInicio asc")'>Data Início (Mais antiga)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("dataInicio desc")'>Data Início (Mais recente)</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        </MudPaper>

        <!-- Listagem de Tarefas -->
        <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <TaskOperations Tarefas="@_tarefas" />
        </MudPaper>

        <!-- Paginação -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-center" Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudPagination ShowPageButtons="true"
                           ShowFirstButton="true"
                           ShowLastButton="true"
                           Count="@_totalCount"
                           BoundaryCount="1"
                           MiddleCount="2"
                           Size="Size.Medium"
                           Color="Color.Primary"
                           SelectedChanged="async (page) => await MudarPagina(page)" />
        </MudPaper>
    </div>
</div>

@code {
    private readonly string[] _states = {"sim", "nao", ""};
    private List<TaskDetailsDto> _tarefas = new();
    private int _paginaAtual = 1;
    private int _tamanhoPagina = 6;
    private int _totalCount = 0;

    private string _ordenacao = "descricao";
    private bool _descendente = false;
    
    private string? _filtroResponsavel;
    private bool mostrarFiltros = false;
    private string? _filtroTitulo;
    private DateTime? _filtroDataInicio;
    private DateTime? _filtroDataFim;

    protected override async Task OnInitializedAsync() => await CarregarDadosAsync();

    private async Task CarregarDadosAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("auth_token");
            if (string.IsNullOrEmpty(token)) return;

            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
            var idClaim = jwt.Claims.FirstOrDefault(c => c.Type == "nameid");

            if (idClaim != null && int.TryParse(idClaim.Value, out var userId))
            {
                // Definir o filtro de Responsável com base na seleção do utilizador
                int? responsavel = null;
                if (_filtroResponsavel == "sim")
                {
                    responsavel = userId; 
                }
                else if (_filtroResponsavel == "nao")
                {
                    responsavel = userId == 0 ? null : -userId;
                } else
                {
                    responsavel = null; 
                }

                var filtros = new TaskFilterDto
                {
                    Titulo = _filtroTitulo,
                    Responsavel = responsavel, 
                    DataInicioDe = _filtroDataInicio,
                    DataInicioAte = _filtroDataFim
                };

                var paged = await TaskService.GetByUserPagedAsync(userId, _paginaAtual, _tamanhoPagina, _ordenacao, _descendente, filtros);
                _tarefas = paged.Items.ToList();
                _totalCount = paged.TotalCount;
            }
        }
        catch
        {
            Snackbar.Add("Erro ao carregar tarefas.", Severity.Error);
        }
    }
    
    private void OrdenarPor(string campo)
    {
        if (_ordenacao == campo)
        {
            _descendente = !_descendente;
        }
        else
        {
            _ordenacao = campo;
            _descendente = false;
        }

        _paginaAtual = 1;
        _ = CarregarDadosAsync();
    }

    private async Task CriarNovaTarefa()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<CreateTaskDialog>("Criar Tarefa", options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Tarefa criada com sucesso!", Severity.Success);
            await CarregarDadosAsync();
        }
    }

    private async Task MudarPagina(int novaPagina)
    {
        _paginaAtual = novaPagina;
        await CarregarDadosAsync();
    }

    private async Task AplicarFiltros()
    {
        _paginaAtual = 1;
        await CarregarDadosAsync();
    }

    private async Task LimparFiltros()
    {
        _filtroTitulo = null;
        _filtroResponsavel = null;
        _filtroDataInicio = null;
        _filtroDataFim = null;
        _paginaAtual = 1;
        await CarregarDadosAsync();
    }
}
