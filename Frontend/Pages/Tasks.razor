@page "/tasks"
@using Blazored.LocalStorage
@using Frontend.DTOs.Task
@using Frontend.DTOs.User
@using Frontend.Services
@inject TaskService          TaskService
@inject UserService          UserService
@inject ILocalStorageService LocalStorage
@inject ISnackbar            Snackbar
@inject NavigationManager    NavigationManager
@layout WorkspaceLayout

<PageTitle>Tarefas</PageTitle>

<div>class="d-flex flex-column align-center justify-center w-100 pt-8">
    <div>style="width:90%">
        <!-- ---------- CABEÇALHO ---------- -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-between"
                  Elevation="1"
                  Style="background:#fff;border-radius:12px;min-height:120px">
            <MudText Typo="Typo.h4" Class="mb-0" Color="Color.Primary">Tarefas</MudText>
            <MudSpacer/>

            <!-- Filtros / Ordenação -->
            <div class="d-flex align-center" style="gap:2rem">
                <div class="d-flex align-center" style="gap:.5rem;cursor:pointer"
                     @onclick="() => _mostrarFiltros = !_mostrarFiltros">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary"/>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Filtros</MudText>
                </div>

                <MudMenu>
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            Ordenar por
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem @onclick='() => OrdenarPor("titulo asc")'>Título (A‑Z)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("titulo desc")'>Título (Z‑A)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("dataInicio asc")'>Data (Mais antiga)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("dataInicio desc")'>Data (Mais recente)</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        </MudPaper>

        <!-- ---------- PAINEL DE FILTROS ---------- -->
        @if (_mostrarFiltros)
        {
            <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:#fff;border-radius:12px">
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Filtros</MudText>
                <MudDivider Class="mb-4"/>

                <MudGrid GutterSize="3">
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="_filtroTitulo" Label="Título da tarefa" FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudNumericField T="int?" @bind-Value="_filtroResponsavelId" Label="ID do responsável" FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudStack Spacing="1">
                            <MudDatePicker @bind-Date="_filtroDataInicio" Label="Data inicial" ShowToolbar="false"/>
                            <MudDatePicker @bind-Date="_filtroDataFim"    Label="Data final"   ShowToolbar="false"/>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end mt-4" style="gap:1rem">
                    <MudButton Variant="Variant.Outlined" OnClick="LimparFiltros">Limpar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AplicarFiltros">Aplicar</MudButton>
                </div>
            </MudPaper>
        }

        <!-- ---------- LISTAGEM ---------- -->
        <MudPaper Class="pa-4 mb-6" Elevation="1"
                  Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudGrid GutterSize="3">
                @if (_tarefas.Count == 0)
                {
                    <MudItem xs="9">
                        <MudCard Class="d-flex align-center justify-center" Style="height:100%;background:#fafafa;border-radius:12px" Elevation="0">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1" Style="color:lightblue">Não existem tarefas</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var t in _tarefas)
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <NavLink href="@($"/task/{t.IdTarefa}")" class="text-decoration-none d-block">
                                <MudCard Class="pa-3" Style="height:100%;border-radius:12px" Elevation="2">
                                    <MudCardContent>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                                @(t.Titulo?.Length > 18 ? t.Titulo[..18] + "..." : t.Titulo)
                                            </MudText>
                                            <MudSpacer/>
                                            <MudIcon Icon="@Icons.Material.Filled.Event"/>
                                            <MudText Typo="Typo.caption">@(t.DataInicio.ToString("dd/MM/yyyy HH:mm"))</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Person"/>
                                            <MudText Typo="Typo.caption">@GetNomeResponsavel(t.Responsavel)</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Description"/>
                                            <MudText Typo="Typo.caption">
                                                @(t.Descricao?.Length > 30 ? t.Descricao[..30] + "..." : t.Descricao)
                                            </MudText>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </NavLink>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>
    </div>
</div>

<!-- ---------- resto da UI (paginação) mantém‑se ---------- -->

@code {

    /* ---------- Estado ---------- */
    private List<TaskDetailsDto> _tarefas = new();
    private readonly Dictionary<int, string> _cacheNomes = new(); // id -> nome

    private int _paginaAtual = 1;
    private int _tamanhoPagina = 15;
    private int _totalPaginas = 1;
    private int? _userId;

    private string? _ordenarPor = "dataInicio";
    private bool _descendente = true;

    private bool _mostrarFiltros = false;
    private string? _filtroTitulo;
    private int? _filtroResponsavelId;
    private DateTime? _filtroDataInicio;
    private DateTime? _filtroDataFim;

    /* ---------- Ciclo de vida ---------- */
    protected override async Task OnInitializedAsync()
    {
        _userId = await LocalStorage.GetItemAsync<int?>("user_id");

        if (!_userId.HasValue)
        {
            Snackbar.Add("Utilizador não autenticado.", Severity.Warning);
            NavigationManager.NavigateTo("/login");
            return;
        }

        await CarregarTarefasAsync();
    }

    /* ---------- Utilitários ---------- */
    private string GetNomeResponsavel(int id)
        => id == 0
            ? string.Empty
            : _cacheNomes.TryGetValue(id, out var nome)
                ? nome
                : $"ID {id}";

    private async Task PreencherNomesAsync()
    {
        var novosIds = _tarefas.Select(t => t.Responsavel)
            .Where(id => id != 0 && !_cacheNomes.ContainsKey(id))
            .Distinct()
            .ToList();

        foreach (var id in novosIds)
        {
            try
            {
                var user = await UserService.GetByIdAsync(id);
                _cacheNomes[id] = user?.Nome ?? $"ID {id}";
            }
            catch
            {
                _cacheNomes[id] = $"ID {id}";
            }
        }
    }

    /* ---------- Carregamento ---------- */
    private async Task CarregarTarefasAsync()
    {
        var filtros = new TaskFilterDto
        {
            Titulo = _filtroTitulo,
            Responsavel = _filtroResponsavelId,
            DataInicioDe = _filtroDataInicio,
            DataInicioAte = _filtroDataFim
        };

        var resultado = await TaskService.GetByUserPagedAsync(
            userId: _userId.Value,
            page: _paginaAtual,
            pageSize: _tamanhoPagina,
            orderBy: _ordenarPor,
            descending: _descendente,
            filtros: filtros
        );

        _tarefas = resultado.Items.ToList();
        _totalPaginas = (int)Math.Ceiling((double)resultado.TotalCount / _tamanhoPagina);

        await PreencherNomesAsync();
        StateHasChanged();
    }

    /* ---------- Acções UI ---------- */
    private async Task MudarPagina(int novaPagina)
    {
        _paginaAtual = novaPagina;
        await CarregarTarefasAsync();
    }

    private async Task AplicarFiltros()
    {
        _paginaAtual = 1;
        await CarregarTarefasAsync();
    }

    private async Task LimparFiltros()
    {
        _filtroTitulo = null;
        _filtroResponsavelId = null;
        _filtroDataInicio = null;
        _filtroDataFim = null;
        _paginaAtual = 1;
        await CarregarTarefasAsync();
    }

    private async Task OrdenarPor(string criterio)
    {
        _paginaAtual = 1;

        (_ordenarPor, _descendente) = criterio switch
        {
            "titulo asc" => ("titulo", false),
            "titulo desc" => ("titulo", true),
            "dataInicio asc" => ("dataInicio", false),
            "dataInicio desc" => ("dataInicio", true),
            _ => (_ordenarPor, _descendente)
        };

        await CarregarTarefasAsync();
    }
}
