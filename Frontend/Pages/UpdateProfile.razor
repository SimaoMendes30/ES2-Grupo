@page "/profile"
@layout WorkspaceLayout

@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Frontend.DTOs.Utilizadores
@using MudBlazor
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Editar Perfil</PageTitle>

<MudPaper Class="pa-6 mx-auto" Style="max-width:600px; background-color:rgba(255,255,255,0.8); backdrop-filter:blur(10px);">
    <MudText Typo="Typo.h5" Class="mb-4" Color="Color.Primary">Atualizar Perfil</MudText>

    <EditForm Model="_updateDto" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <MudTextField @bind-Value="_updateDto.Nome"
                      Label="Nome"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Required="true"
                      Class="mb-3" />
        <MudTextField @bind-Value="_updateDto.Username"
                      Label="Username"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Required="true"
                      Class="mb-3" />

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="_loadingProfile"
                   Class="mb-4"
                   FullWidth="true">
            @if (_loadingProfile)
            {
                <MudProgressCircular Size="Size.Small" Class="mr-2" />
                <span>Gravando…</span>
            }
            else
            {
                <span>Guardar Alterações</span>
            }
        </MudButton>
    </EditForm>

    <MudDivider Class="my-6" />

    <MudText Typo="Typo.h5" Class="mb-4" Color="Color.Primary">Alterar Password</MudText>

    <EditForm Model="_pwdDto" OnValidSubmit="HandleChangePassword">
        <DataAnnotationsValidator />
        <MudTextField @bind-Value="_pwdDto.OldPassword"
                      Label="Password Atual"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Required="true"
                      InputType="InputType.Password"
                      Class="mb-3" />
        <MudTextField @bind-Value="_pwdDto.NewPassword"
                      Label="Nova Password"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Required="true"
                      InputType="InputType.Password"
                      Class="mb-3" />
        <MudTextField @bind-Value="_pwdDto.NewPassword"
                      Label="Confirmar Nova Password"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Required="true"
                      InputType="InputType.Password"
                      Class="mb-4" />

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Secondary"
                   Disabled="_loadingPassword"
                   FullWidth="true">
            @if (_loadingPassword)
            {
                <MudProgressCircular Size="Size.Small" Class="mr-2" />
                <span>Gravando…</span>
            }
            else
            {
                <span>Alterar Password</span>
            }
        </MudButton>
    </EditForm>
</MudPaper>

@code {
    private UtilizadorUpdateDto         _updateDto        = new();
    private UtilizadorUpdatePasswordDto _pwdDto           = new();
    private bool                        _loadingProfile   = false;
    private bool                        _loadingPassword  = false;
    private int                         _userId;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("auth_token");
        if (string.IsNullOrEmpty(token))
        {
            Nav.NavigateTo("/login");
            return;
        }
        var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
        var idClaim = jwt.Claims.FirstOrDefault(c => c.Type == "nameid");
        if (idClaim != null && int.TryParse(idClaim.Value, out var uid))
        {
            _userId = uid;
            await LoadCurrentProfileAsync();
        }
    }

    private async Task LoadCurrentProfileAsync()
    {
        try
        {
            var dto = await Http.GetFromJsonAsync<UtilizadorDetailsDto>($"api/utilizador/{_userId}");
            if (dto != null)
            {
                _updateDto.Nome     = dto.Nome;
                _updateDto.Username = dto.Username;
            }
        }
        catch
        {
            Snackbar.Add("Erro ao carregar perfil.", Severity.Error);
        }
    }

    private async Task HandleUpdate()
    {
        _loadingProfile = true;
        try
        {
            var resp = await Http.PutAsJsonAsync($"api/utilizador/{_userId}/password", _pwdDto);
            if (resp.IsSuccessStatusCode)
                Snackbar.Add("Perfil atualizado com sucesso!", Severity.Success);
            else
            {
                var err = await resp.Content.ReadAsStringAsync();
                Snackbar.Add($"Falha ao atualizar perfil: {err}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loadingProfile = false;
        }
    }

    private async Task HandleChangePassword()
    {
        _loadingPassword = true;
        try
        {
            var resp = await Http.PutAsJsonAsync($"api/utilizador/{_userId}/password", _pwdDto);
            if (resp.IsSuccessStatusCode)
            {
                Snackbar.Add("Password alterada com sucesso!", Severity.Success);
                _pwdDto = new UtilizadorUpdatePasswordDto(); // limpa o formulário
            }
            else
            {
                var err = await resp.Content.ReadAsStringAsync();
                Snackbar.Add($"Falha ao alterar password: {err}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loadingPassword = false;
        }
    }
}
