@page "/profile"
@layout WorkspaceLayout

@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Frontend.DTOs.User
@using Frontend.Services
@inject UserService UserService
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Editar Perfil</PageTitle>

<MudPaper Class="pa-6 mx-auto" Style="max-width:600px; background-color:rgba(255,255,255,0.8); backdrop-filter:blur(10px);">
    <MudText Typo="Typo.h5" Class="mb-4" Color="Color.Primary">Atualizar Perfil</MudText>

    <EditForm Model="_updateDto" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />

        <MudTextField @bind-Value="_updateDto.Nome"
                      Label="Nome"
                      Variant="Variant.Outlined"
                      FullWidth
                      Required
                      Class="mb-3" />

        <MudTextField @bind-Value="_updateDto.Username"
                      Label="Username"
                      Variant="Variant.Outlined"
                      FullWidth
                      Required
                      Class="mb-3" />

        <MudNumericField T="int?" @bind-Value="_updateDto.NumHoras"
                         Label="N.º de horas"
                         Variant="Variant.Outlined"
                         FullWidth
                         Class="mb-4" />

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="_loadingProfile"
                   FullWidth>
            @if (_loadingProfile)
            {
                <MudProgressCircular Size="Size.Small" Class="mr-2" />
                <span>A gravar…</span>
            }
            else
            {
                <span>Guardar Alterações</span>
            }
        </MudButton>
    </EditForm>
</MudPaper>

@code {
    private UserUpdateDto _updateDto = new();
    private bool _loadingProfile = false;
    private int? _userId;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("auth_token");
        if (string.IsNullOrWhiteSpace(token))
        {
            Nav.NavigateTo("/login");
            return;
        }

        var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
        var idClaim = jwt.Claims.FirstOrDefault(c => c.Type == "nameid");

        if (idClaim != null && int.TryParse(idClaim.Value, out var uid))
        {
            _userId = uid;
            await LoadCurrentProfileAsync();
        }
        else
        {
            Snackbar.Add("Não foi possível obter o utilizador autenticado.", Severity.Error);
            Nav.NavigateTo("/login");
        }
    }

    private async Task LoadCurrentProfileAsync()
    {
        if (!_userId.HasValue)
            return;

        try
        {
            var dto = await UserService.GetByIdAsync(_userId.Value);
            if (dto != null)
            {
                _updateDto = new UserUpdateDto
                {
                    Nome = dto.Nome,
                    Username = dto.Username,
                    NumHoras = dto.NumHoras
                };
            }
        }
        catch
        {
            Snackbar.Add("Erro ao carregar o perfil.", Severity.Error);
        }
    }

    private async Task HandleUpdate()
    {
        if (!_userId.HasValue)
        {
            Snackbar.Add("Utilizador inválido.", Severity.Error);
            return;
        }

        _loadingProfile = true;
        try
        {
            var result = await UserService.UpdateAsync(_userId.Value, _updateDto);
            if (result)
                Snackbar.Add("Perfil atualizado com sucesso!", Severity.Success);
            else
                Snackbar.Add("Erro ao atualizar perfil.", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loadingProfile = false;
        }
    }
}
