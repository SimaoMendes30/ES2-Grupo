@page "/dashboard"
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Frontend.Services
@using Frontend.DTOs.Projetos
@using Frontend.DTOs.Tarefas
@using Components.Projetos
@using Frontend.Components.Tarefa
@layout WorkspaceLayout

@inject ILocalStorageService LocalStorage
@inject ProjetoService ProjectService
@inject TarefaService TaskService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Dashboard</PageTitle>

<div style="display: flex; flex-direction: column; align-items: center; justify-content: center; width: 100%; padding-top: 2rem;">
    <div style="width: 90%;">

        <!-- DASHBOARD -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-center"
                  Elevation="1"
                  Style="background-color: rgba(255,255,255,1); border-radius: var(--app-radius); width: 100%; min-height: 120px;">
            <MudText Typo="Typo.h4" Class="display-4 mb-0 text-center" Color="Color.Primary">
                Dashboard
            </MudText>
        </MudPaper>

        <!-- PROJETOS -->
        <MudPaper Class="pa-4 mb-6"
                  Elevation="1"
                  Style="background-color: rgba(255,255,255,0.5); border-radius: var(--app-radius); width: 100%; backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px);">

            <NavLink href="/projects" class="text-decoration-none">
                <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-start cursor-pointer"
                          Elevation="1"
                          Style="background-color: rgba(255,255,255,1); border-radius: var(--app-radius); width: 100%;">
                    <MudText Typo="Typo.h5" Class="display-4 mb-0 text-start" Color="Color.Primary">
                        Projetos
                    </MudText>
                </MudPaper>
            </NavLink>

            <MudGrid gutterSize="3">
                <MudItem xs="12" sm="6" md="3">
                    <MudCard class="d-flex align-items-center justify-center cursor-pointer text-center"
                             style="height: 100%; border: 2px solid var(--app-primary); border-radius: var(--app-radius);"
                             @onclick="CriarNovoProjeto"
                             Elevation="1">
                        <MudCardContent class="d-flex align-items-center justify-center w-100 h-100 p-0">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                @if (_ultimosProjetos.Count == 0)
                {
                    <MudItem xs="9">
                        <MudCard class="d-flex align-items-center justify-center text-center"
                                 style="height: 100%; background-color: #fafafa; border-radius: var(--app-radius);"
                                 Elevation="0">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1" Style="color: lightblue">Não existem projetos</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var projeto in _ultimosProjetos)
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <NavLink href="@($"/project/{projeto.IdProjeto}")" class="text-decoration-none d-block">
                                <MudCard class="pa-3 w-100"
                                         style="height: 100%; border-radius: var(--app-radius);"
                                         Elevation="2">
                                    <MudCardContent>
                                        <div style="display: flex; align-items: center;">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                                @((projeto.Nome?.Length > 20) ? projeto.Nome.Substring(0, 20) + "..." : projeto.Nome)
                                            </MudText>
                                            <MudSpacer/>
                                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                                <MudIcon Icon="@Icons.Material.Filled.Event"/>
                                                <MudText Typo="Typo.caption">@projeto.DataCriacao?.ToShortDateString()</MudText>
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; gap: 0.5rem;margin-top: 0.5rem;">
                                            <MudIcon Icon="@Icons.Material.Filled.Person"/>
                                            <MudText Typo="Typo.caption">@projeto.NomeCliente</MudText>
                                        </div>

                                        <div style="display: flex; align-items: center; gap: 0.5rem;margin-top: 0.25rem;">
                                            <MudIcon Icon="@Icons.Material.Filled.Description"/>
                                            <MudText Typo="Typo.caption">@((projeto.Descricao?.Length > 30) ? projeto.Descricao.Substring(0, 30) + "..." : projeto.Descricao)</MudText>
                                        </div>



                                    </MudCardContent>
                                </MudCard>
                            </NavLink>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>

        <!-- TAREFAS -->
        <MudPaper Class="pa-4 mb-6"
                  Elevation="1"
                  Style="background-color: rgba(255,255,255,0.5); border-radius: var(--app-radius); width: 100%; backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px);">

            <NavLink href="/tasks" class="text-decoration-none">
                <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-start cursor-pointer"
                          Elevation="1"
                          Style="background-color: rgba(255,255,255,1); border-radius: var(--app-radius); width: 100%;">
                    <MudText Typo="Typo.h5" Class="display-4 mb-0 text-start" Color="Color.Primary">
                        Tarefas
                    </MudText>
                </MudPaper>
            </NavLink>

            <MudGrid gutterSize="3">
                <MudItem xs="12" sm="6" md="3">
                    <MudCard class="d-flex align-items-center justify-center cursor-pointer text-center"
                             style="height: 100%; border: 2px solid var(--app-primary); border-radius: var(--app-radius);"
                             @onclick="CriarNovaTarefa"
                             Elevation="1">
                        <MudCardContent class="d-flex align-items-center justify-center w-100 h-100 p-0">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                @if (_ultimasTarefas.Count == 0)
                {
                    <MudItem xs="9">
                        <MudCard class="d-flex align-items-center justify-center text-center"
                                 style="height: 100%; background-color: #fafafa; border-radius: var(--app-radius);"
                                 Elevation="0">
                            <MudCardContent>
                                <MudAlert Severity="Severity.Info" Variant="Variant.Filled">Não existem tarefas associadas.</MudAlert>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var tarefa in _ultimasTarefas)
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <NavLink href="@($"/tarefas/{tarefa.IdTarefa}")" class="text-decoration-none d-block">
                                <MudCard class="pa-3 w-100"
                                         style="height: 100%; border-radius: var(--app-radius);"
                                         Elevation="2">
                                    <MudCardContent>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@tarefa.Descricao</MudText>
                                        <MudText Typo="Typo.caption" Class="text-muted">
                                            <b>Criado:</b> @tarefa.DataInicio.ToShortDateString()
                                        </MudText>
                                    </MudCardContent>
                                </MudCard>
                            </NavLink>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>
    </div>
</div>

@code {
    private List<ProjetoDto> _ultimosProjetos = new();
    private List<TarefaDto> _ultimasTarefas = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarDadosAsync();
    }

    private async Task CarregarDadosAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("auth_token");
            if (string.IsNullOrEmpty(token)) return;

            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
            var idClaim = jwt.Claims.FirstOrDefault(c => c.Type == "nameid");

            if (idClaim != null && int.TryParse(idClaim.Value, out var userId))
            {
                var todosProjetos = await ProjectService.ListByUserAsync(userId);
                _ultimosProjetos = todosProjetos.OrderByDescending(p => p.IdProjeto).Take(3).ToList();

                var todasTarefas = await TaskService.ListByUserAsync(userId);
                _ultimasTarefas = todasTarefas.OrderByDescending(t => t.IdTarefa).Take(3).ToList();
            }
        }
        catch
        {
            // silencioso
        }
    }

    private async Task CriarNovoProjeto()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<CreateProjectDialog>("Criar Projeto", options);

        var result = await dialogReference.Result;

        if (!result.Canceled && result.Data is ProjetoCreateDto projetoCriado)
        {
            Snackbar.Add("Projeto criado com sucesso!", Severity.Success);
            await CarregarDadosAsync();
            StateHasChanged();
        }
    }
    
    private async Task CriarNovaTarefa()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<CreateTaskDialog>("Criar Tarefa", options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Tarefa criada com sucesso!", Severity.Success);
            await CarregarDadosAsync();
        }
    }
}
