@page "/projects"
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Frontend.Components.Projetos
@using Frontend.DTOs.Projetos
@using Frontend.Services
@using MudBlazor
@layout WorkspaceLayout

@inject ProjetoService      ProjectService
@inject ILocalStorageService LocalStorage
@inject IDialogService       DialogService
@inject ISnackbar            Snackbar

<PageTitle>Projetos</PageTitle>

<div class="d-flex flex-column align-center justify-center w-100 pt-8">
    <div style="width:90%">
        <!-- ---------- CABEÇALHO ---------- -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-between"
                  Elevation="1"
                  Style="background:#fff;border-radius:12px;min-height:120px">
            <MudText Typo="Typo.h4" Class="mb-0" Color="Color.Primary">Projetos</MudText>
            <MudSpacer/>

            <!-- Filtros / Ordenação -->
            <div class="d-flex align-center" style="gap:2rem">
                <!-- Filtros -->
                <div class="d-flex align-center" style="gap:.5rem;cursor:pointer"
                     @onclick="() => mostrarFiltros = !mostrarFiltros">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary"/>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Filtros</MudText>
                </div>

                <!-- Ordenação -->
                <MudMenu>
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            Ordenar por
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem @onclick='() => OrdenarPor("nome asc")'>Nome (A‑Z)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("nome desc")'>Nome (Z‑A)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("data asc")'>Data (Mais antiga)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("data desc")'>Data (Mais recente)</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        </MudPaper>

        <!-- ---------- PAINEL DE FILTROS ---------- -->
        @if (mostrarFiltros)
        {
            <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:#fff;border-radius:12px">
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Filtros</MudText>
                <MudDivider Class="mb-4"/>

                <MudGrid GutterSize="3">
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="_filtroNome"    Label="Nome do projeto" FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="_filtroCliente" Label="Cliente"         FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudStack Spacing="1">
                            <MudDatePicker @bind-Date="_filtroDataInicio" Label="Data inicial" ShowToolbar="false"/>
                            <MudDatePicker @bind-Date="_filtroDataFim"    Label="Data final"   ShowToolbar="false"/>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end mt-4" style="gap:1rem">
                    <MudButton Variant="Variant.Outlined" OnClick="LimparFiltros">Limpar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AplicarFiltros">Aplicar</MudButton>
                </div>
            </MudPaper>
        }

        <!-- ---------- LISTAGEM ---------- -->
        <MudPaper Class="pa-4 mb-6"
                  Elevation="1"
                  Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudGrid GutterSize="3">
                <!-- Card “Novo projeto” -->
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Class="d-flex align-center justify-center cursor-pointer"
                             Style="height:100%;border:2px solid var(--mud-palette-primary);border-radius:12px"
                             Elevation="1"
                             @onclick="CriarNovoProjeto">
                        <MudCardContent Class="d-flex align-center justify-center w-100 h-100 p-0">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                @if (_projetosFiltrados.Count == 0)
                {
                    <MudItem xs="9">
                        <MudCard Class="d-flex align-center justify-center"
                                 Style="height:100%;background:#fafafa;border-radius:12px"
                                 Elevation="0">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1" Style="color:lightblue">
                                    Não existem projetos
                                </MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var p in _projetosFiltrados)
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <NavLink href="@($"/project/{p.IdProjeto}")" class="text-decoration-none d-block">
                                <MudCard Class="pa-3" Style="height:100%;border-radius:12px" Elevation="2">
                                    <MudCardContent>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                                @(p.Nome?.Length > 18 ? p.Nome[..18] + "..." : p.Nome)
                                            </MudText>
                                            <MudSpacer/>
                                            <MudIcon Icon="@Icons.Material.Filled.Event"/>
                                            <MudText Typo="Typo.caption">
                                                @p.DataCriacao?.ToString("dd/MM/yyyy")
                                            </MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Person"/>
                                            <MudText Typo="Typo.caption">@p.NomeCliente</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Description"/>
                                            <MudText Typo="Typo.caption">
                                                @(p.Descricao?.Length > 30 ? p.Descricao[..30] + "..." : p.Descricao)
                                            </MudText>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </NavLink>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>
    </div>
</div>

@code {
    /* ---------- filtros ---------- */
    private bool       mostrarFiltros;
    private string     _filtroNome       = string.Empty;
    private string     _filtroCliente    = string.Empty;
    private DateTime?  _filtroDataInicio;
    private DateTime?  _filtroDataFim;

    /* ---------- dados ---------- */
    private readonly List<ProjetoDto> _projetos          = new();
    private List<ProjetoDto>          _projetosFiltrados = new();

    /* ---------- ciclo de vida ---------- */
    protected override async Task OnInitializedAsync() => await CarregarDadosAsync();

    private async Task CarregarDadosAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("auth_token");
            if (string.IsNullOrWhiteSpace(token)) return;

            var idClaim = new JwtSecurityTokenHandler()
                          .ReadJwtToken(token)
                          .Claims.FirstOrDefault(c => c.Type == "nameid");

            if (idClaim is not null && int.TryParse(idClaim.Value, out var userId))
            {
                _projetos.Clear();
                _projetos.AddRange(await ProjectService.ListByUserAsync(userId) ?? Enumerable.Empty<ProjetoDto>());
                AplicarFiltros();
            }
        }
        catch
        {
            Snackbar.Add("Erro ao carregar projetos.", Severity.Error);
        }
    }

    /* ---------- filtros e ordenação ---------- */
    private string _ordenacaoAtual = "nome asc";

    private void AplicarFiltros()
    {
        _projetosFiltrados = _projetos.Where(p =>
            (string.IsNullOrWhiteSpace(_filtroNome) ||
                p.Nome?.Contains(_filtroNome, StringComparison.OrdinalIgnoreCase) == true) &&
            (string.IsNullOrWhiteSpace(_filtroCliente) ||
                p.NomeCliente?.Contains(_filtroCliente, StringComparison.OrdinalIgnoreCase) == true) &&
            (!_filtroDataInicio.HasValue ||
                (p.DataCriacao.HasValue && p.DataCriacao.Value >= _filtroDataInicio.Value)) &&
            (!_filtroDataFim.HasValue ||
                (p.DataCriacao.HasValue && p.DataCriacao.Value <= _filtroDataFim.Value))
        ).ToList();

        OrdenarPor(_ordenacaoAtual);
        mostrarFiltros = false;
    }

    private void LimparFiltros()
    {
        _filtroNome        = string.Empty;
        _filtroCliente     = string.Empty;
        _filtroDataInicio  = null;
        _filtroDataFim     = null;
        AplicarFiltros();
    }

    private void OrdenarPor(string criterio)
    {
        _ordenacaoAtual    = criterio;
        _projetosFiltrados = criterio switch
        {
            "nome asc"  => _projetosFiltrados.OrderBy(p => p.Nome).ToList(),
            "nome desc" => _projetosFiltrados.OrderByDescending(p => p.Nome).ToList(),
            "data asc"  => _projetosFiltrados.OrderBy(p => p.DataCriacao).ToList(),
            "data desc" => _projetosFiltrados.OrderByDescending(p => p.DataCriacao).ToList(),
            _           => _projetosFiltrados
        };
    }

    /* ---------- criar novo ---------- */
    private async Task CriarNovoProjeto()
    {
        var dialog = await DialogService.ShowAsync<CreateProjectDialog>(
            "Criar Projeto",
            new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true });

        if (!(await dialog.Result).Canceled)
        {
            Snackbar.Add("Projeto criado com sucesso!", Severity.Success);
            await CarregarDadosAsync();
        }
    }
}
