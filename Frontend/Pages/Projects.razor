@page "/projects"
@using Frontend.DTOs.Project
@using Frontend.Services
@using Blazored.LocalStorage
@using Frontend.Components.Projects
@layout WorkspaceLayout

@inject ProjectService ProjectService
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Projetos</PageTitle>

<div class="d-flex flex-column align-center justify-center w-100 pt-8">
    <div style="width:90%">
        <!-- ---------- CABEÇALHO ---------- -->
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-between"
                  Elevation="1"
                  Style="background:#fff;border-radius:12px;min-height:120px">
            <MudText Typo="Typo.h4" Class="mb-0" Color="Color.Primary">Projetos</MudText>
            <MudSpacer/>

            <!-- Filtros / Ordenação -->
            <div class="d-flex align-center" style="gap:2rem">
                <!-- Filtros -->
                <div class="d-flex align-center" style="gap:.5rem;cursor:pointer"
                     @onclick="() => mostrarFiltros = !mostrarFiltros">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary"/>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Filtros</MudText>
                </div>

                <!-- Ordenação -->
                <MudMenu>
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            Ordenar por
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem @onclick='() => OrdenarPor("nome asc")'>Nome (A-Z)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("nome desc")'>Nome (Z-A)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("data asc")'>Data (Mais antiga)</MudMenuItem>
                        <MudMenuItem @onclick='() => OrdenarPor("data desc")'>Data (Mais recente)</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        </MudPaper>

        <!-- ---------- PAINEL DE FILTROS ---------- -->
        @if (mostrarFiltros)
        {
            <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:#fff;border-radius:12px">
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Filtros</MudText>
                <MudDivider Class="mb-4"/>

                <MudGrid GutterSize="3">
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="_filtroNome" Label="Nome do projeto" FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="_filtroCliente" Label="Cliente" FullWidth/>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudStack Spacing="1">
                            <MudDatePicker @bind-Date="_filtroDataInicio" Label="Data inicial" ShowToolbar="false"/>
                            <MudDatePicker @bind-Date="_filtroDataFim" Label="Data final" ShowToolbar="false"/>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end mt-4" style="gap:1rem">
                    <MudButton Variant="Variant.Outlined" OnClick="LimparFiltros">Limpar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AplicarFiltros">Aplicar</MudButton>
                </div>
            </MudPaper>
        }

        <!-- ---------- LISTAGEM ---------- -->
        <MudPaper Class="pa-4 mb-6" Elevation="1" Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudGrid GutterSize="3">
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Class="d-flex align-center justify-center cursor-pointer"
                             Style="height:100%;border:2px solid var(--mud-palette-primary);border-radius:12px"
                             Elevation="1"
                             @onclick="CriarNovoProjeto">
                        <MudCardContent Class="d-flex align-center justify-center w-100 h-100 p-0">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                @if (_projetos.Count == 0)
                {
                    <MudItem xs="9">
                        <MudCard Class="d-flex align-center justify-center" Style="height:100%;background:#fafafa;border-radius:12px" Elevation="0">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1" Style="color:lightblue">Não existem projetos</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var p in _projetos)
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <NavLink href="@($"/project/{p.IdProjeto}")" class="text-decoration-none d-block">
                                <MudCard Class="pa-3" Style="height:100%;border-radius:12px" Elevation="2">
                                    <MudCardContent>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                                @(p.Nome?.Length > 18 ? p.Nome[..18] + "..." : p.Nome)
                                            </MudText>
                                            <MudSpacer/>
                                            <MudIcon Icon="@Icons.Material.Filled.Event"/>
                                            <MudText Typo="Typo.caption">@p.DataCriacao?.ToString("dd/MM/yyyy")</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Person"/>
                                            <MudText Typo="Typo.caption">@p.NomeCliente</MudText>
                                        </div>

                                        <div class="d-flex align-center gap-1 mt-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Description"/>
                                            <MudText Typo="Typo.caption">
                                                @(p.Descricao?.Length > 30 ? p.Descricao[..30] + "..." : p.Descricao)
                                            </MudText>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </NavLink>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>
        <MudPaper Class="pa-4 mb-6 d-flex align-items-center justify-center" Style="background:rgba(255,255,255,.5);border-radius:12px;backdrop-filter:blur(10px)">
            <MudPagination ShowPageButtons="true" 
                           ShowFirstButton="true" 
                           ShowLastButton="true" 
                           Count="@_totalPaginas" 
                           BoundaryCount="1"
                           MiddleCount="2"
                           Size="Size.Medium"
                           Color="Color.Primary"
                           SelectedChanged="async (page) => await MudarPagina(page)" />
        </MudPaper>
    </div>
</div>

@code {
    private List<ProjectDetailsDto> _projetos = new();
    private int _paginaAtual = 1;
    private int _tamanhoPagina = 15;
    private int _totalPaginas = 1;

    private string? _ordenarPor = "dataCriacao";
    private bool _descendente = true;

    private bool mostrarFiltros = false;
    private string? _filtroNome;
    private string? _filtroCliente;
    private DateTime? _filtroDataInicio;
    private DateTime? _filtroDataFim;

    private int? _userId;

    protected override async Task OnInitializedAsync()
    {
        _userId = await LocalStorage.GetItemAsync<int?>("user_id");

        if (!_userId.HasValue)
        {
            Snackbar.Add("Utilizador não autenticado.", Severity.Warning);
            NavigationManager.NavigateTo("/login");
            return;
        }

        await CarregarProjetosAsync();
    }

    private async Task CarregarProjetosAsync()
    {
        var filtros = new ProjectFilterDto
        {
            Nome = _filtroNome,
            NomeCliente = _filtroCliente,
            DataCriacaoDe = _filtroDataInicio,
            DataCriacaoAte = _filtroDataFim
        };

        var resultado = await ProjectService.GetByUserPagedAsync(
            userId: _userId.Value,
            page: _paginaAtual,
            pageSize: _tamanhoPagina,
            orderBy: _ordenarPor,
            descending: _descendente,
            filtros: filtros
        );

        _projetos = resultado.Items.ToList();
        Console.WriteLine(resultado.TotalCount);
        _totalPaginas = (int)Math.Ceiling((double)resultado.TotalCount / _tamanhoPagina);
        Console.WriteLine(_totalPaginas);
    }

    private async Task MudarPagina(int novaPagina)
    {
        _paginaAtual = novaPagina;
        await CarregarProjetosAsync();
    }

    private async Task AplicarFiltros()
    {
        _paginaAtual = 1;
        await CarregarProjetosAsync();
    }

    private async Task LimparFiltros()
    {
        _filtroNome = null;
        _filtroCliente = null;
        _filtroDataInicio = null;
        _filtroDataFim = null;
        _paginaAtual = 1;
        await CarregarProjetosAsync();
    }

    private async Task OrdenarPor(string criterio)
    {
        _paginaAtual = 1;

        (_ordenarPor, _descendente) = criterio switch
        {
            "nome asc" => ("nome", false),
            "nome desc" => ("nome", true),
            "data asc" => ("dataCriacao", false),
            "data desc" => ("dataCriacao", true),
            _ => (_ordenarPor, _descendente)
        };

        await CarregarProjetosAsync();
    }

    private void CriarNovoProjeto()
    {
        NavigationManager.NavigateTo("/project/create");
    }
}
