@page "/project/{ProjetoId:int}"
@using Frontend.DTOs.Project
@using Frontend.DTOs.Task
@using Frontend.Services
@inject ProjectService ProjectService
@inject TaskService TaskService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@layout WorkspaceLayout

<PageTitle>Project Details</PageTitle>

<div class="page-container">
    <div class="glass-side"></div>

    <div style="flex:2;padding:2rem">
        @if (_project is null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate Size="Size.Large" />
        }
        else
        {
            <!-- ---------- Project Info ---------- -->
            <MudPaper Elevation="4" Class="pa-6 mb-6"
                      Style="background:rgba(255,255,255,.9);border-radius:16px;backdrop-filter:blur(8px)">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h4" Color="Color.Primary">@_project.Nome</MudText>
                    <MudText Typo="Typo.subtitle2">@_project.NomeCliente</MudText>

                    <MudDivider Class="my-2" />

                    <MudText Typo="Typo.body1">@_project.Descricao</MudText>

                    <MudStack Row Spacing="4" Class="mt-2">
                        <MudText Typo="Typo.caption"><b>Preço/h:</b> @_project.PrecoHora?.ToString("C") ?? "N/D"</MudText>
                        <MudText Typo="Typo.caption"><b>Criado em:</b> @_project.DataCriacao?.ToShortDateString() ?? "N/D"</MudText>
                    </MudStack>

                    <MudStack Row Spacing="2" Justify="Justify.FlexEnd" Class="mt-3">
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteProject">
                            Eliminar
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>

            <!-- ---------- Tasks ---------- -->
            <MudPaper Elevation="3" Class="pa-6"
                      Style="background:rgba(255,255,255,.95);border-radius:16px">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6" Color="Color.Primary">Tarefas Associadas</MudText>

                    @if (_tasks is null)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate />
                    }
                    else if (!_tasks.Any())
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                            Não existem tarefas associadas.
                        </MudAlert>
                    }
                    else
                    {
                        <MudGrid GutterSize="2" RowSpacing="3">
                            @foreach (var t in _tasks)
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudPaper Class="pa-4" Elevation="2"
                                              Style="background:rgba(255,255,255,.9);border-radius:12px">
                                        <MudStack Spacing="1">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">@t.Descricao</MudText>
                                            <MudText Typo="Typo.caption"><b>Estado:</b> @t.Estado</MudText>
                                            <MudText Typo="Typo.caption"><b>Início:</b> @t.DataInicio.ToShortDateString()</MudText>
                                            <MudText Typo="Typo.caption"><b>Fim:</b> @(t.DataFim?.ToShortDateString() ?? "Em curso")</MudText>

                                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                                <MudMenuItem OnClick="() => CompleteTask(t.IdTarefa)">Terminar</MudMenuItem>
                                                <MudMenuItem OnClick="() => RemoveTask(t.IdTarefa)">Remover</MudMenuItem>
                                            </MudMenu>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                </MudStack>
            </MudPaper>
        }
    </div>

    <div class="glass-side"></div>
</div>

@code {
    [Parameter] public int ProjetoId { get; set; }

    private ProjectDetailsExtendedDto? _project;
    private IEnumerable<TaskDetailsDto>? _tasks;

    protected override async Task OnInitializedAsync()
    {
        _project = await ProjectService.GetByIdAsync(ProjetoId);
        _tasks = await TaskService.GetByProjetoIdAsync(ProjetoId);
    }

    private async Task RefreshTasks()
    {
        _tasks = await TaskService.GetByProjetoIdAsync(ProjetoId);
        StateHasChanged();
    }

    private async Task DeleteProject()
    {
        var confirm = await DialogService.ShowMessageBox(
            "Eliminar",
            "Tem a certeza que deseja eliminar este projeto?",
            "Sim", "Cancelar");

        if (confirm == true && _project is not null)
        {
            if (await ProjectService.DeleteAsync(_project.IdProjeto))
            {
                Snackbar.Add("Projeto eliminado com sucesso.", Severity.Success);
                NavigationManager.NavigateTo("/projetos");
            }
            else Snackbar.Add("Erro ao eliminar o projeto.", Severity.Error);
        }
    }

    private async Task CompleteTask(int id)
    {
        await TaskService.UpdateAsync(id, new TaskUpdateDto() { Estado = "Finalizada" });
        Snackbar.Add("Tarefa marcada como concluída.", Severity.Success);
        await RefreshTasks();
    }

    private async Task RemoveTask(int id)
    {
        if (await TaskService.DeleteAsync(id))
        {
            Snackbar.Add("Tarefa removida com sucesso.", Severity.Info);
            await RefreshTasks();
        }
        else Snackbar.Add("Erro ao remover tarefa.", Severity.Error);
    }
}