@using Frontend.Services
@using Frontend.DTOs.Project
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />

            <MudStack Spacing="2">
                <MudTextField T="string"
                              Label="Nome"
                              Variant="Variant.Outlined"
                              @bind-Value="Projeto.Nome"
                              Required="true"
                              FullWidth="true" />

                <MudTextField T="string"
                              Label="Nome do Cliente"
                              Variant="Variant.Outlined"
                              @bind-Value="Projeto.NomeCliente"
                              Required="true"
                              FullWidth="true" />

                <MudTextField T="string"
                              Label="Descrição"
                              Variant="Variant.Outlined"
                              @bind-Value="Projeto.Descricao"
                              TextArea="true"
                              Lines="3"
                              FullWidth="true" />

                <MudNumericField T="decimal?"
                                 Label="Preço/Hora (€)"
                                 Variant="Variant.Outlined"
                                 @bind-Value="Projeto.PrecoHora"
                                 Min="0"
                                 DecimalPlaces="2"
                                 FullWidth="true" />
            </MudStack>

            <ValidationSummary />
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Submit">Criar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private ProjectService ProjetoService { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private ProjectCreateDto Projeto { get; set; } = new();
    private EditContext editContext = default!;
    
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Projeto);

        // 🔍 Buscar o ID do utilizador ao LocalStorage
        var userId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");

        if (!string.IsNullOrEmpty(userId) && int.TryParse(userId, out int idParsed))
        {
            Projeto.Responsavel = idParsed;
        }
        else
        {
            Snackbar.Add("Utilizador não autenticado.", Severity.Warning);
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task Submit()
    {
        if (editContext.Validate())
        {
            try
            {
                // 📝 Submeter o Projeto com o ID do Utilizador associado
                var criado = await ProjetoService.CreateAsync(Projeto);
                Snackbar.Add("Projeto criado com sucesso.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(criado));
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao criar projeto: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
